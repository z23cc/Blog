---
import type { Page, GetStaticPaths } from "astro";
// import type { CollectionEntry } from "astro:content";
import PageLayout from "@/layouts/Base.astro";
import PostPreview from "@/components/blog/PostPreview.astro";
import Pagination from "@/components/Paginator.astro";
import { getAllPosts, getUniqueTags } from "@/lib/notion/client";
import type { Post } from "@/lib/interfaces";
import { getTagsNameWDesc, slugify } from "@/utils";
import { HIDE_UNDERSCORE_SLUGS_IN_LISTS, NUMBER_OF_POSTS_PER_PAGE } from "@/constants";
import { getNavLink } from "@/lib/blog-helpers";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers";
import Icon from "@/components/Icon.astro";

export const getStaticPaths = (async ({ paginate }) => {
	let posts = await getAllPosts();
	if (HIDE_UNDERSCORE_SLUGS_IN_LISTS) {
		posts = posts.filter((post) => !post.Slug.startsWith("_"));
	}

	const tags = await getUniqueTags(posts);
	const tagsNameWDesc = await getTagsNameWDesc();

	return tags.flatMap((tag) => {
		// Initially filter posts based on the collection
		let tagPosts = posts.filter((post) => post.Tags.some((postTag) => postTag.name === tag.name));

		// Sort posts to have pinned ones on top while maintaining the original order within each category
		tagPosts.sort((a, b) => {
			if (a.Pinned === b.Pinned) {
				return 0; // maintain original order if both are pinned or both are not pinned
			}
			return a.Pinned ? -1 : 1; // pinned posts come first
		});

		return paginate(tagPosts, {
			params: { tag: slugify(tag.name) },
			props: {
				tag: tag.name,
				description: tagsNameWDesc[tag.name] ? tagsNameWDesc[tag.name] : "",
				color: tag.color,
			},
			pageSize: NUMBER_OF_POSTS_PER_PAGE,
		});
	});
}) satisfies GetStaticPaths;

interface Props {
	page: Page<Post>;
	tag: string;
	description: string;
	color: string;
}

const { page, tag, description, color } = Astro.props as Props;

const meta = {
	title: `Tag: ${tag}`,
	description: description || `View all posts with the tag - ${tag}`,
	ogImage: "/og-image/tagpage---" + tag + ".png",
};

const paginationProps = {
	...(page.url.prev && {
		prevUrl: {
			url: getNavLink(page.url.prev),
			text: `← Previous Tags`,
		},
	}),
	...(page.url.next && {
		nextUrl: {
			url: getNavLink(page.url.next),
			text: `Next Tags →`,
		},
	}),
};
---

<PageLayout meta={meta}>
	<h1 class="title mb-6 flex max-w-full items-center">
		<span
			class={`rounded-lg px-2 py-1 ${getNotionColorToTailwindColor(color + "-background", true)} `}
			><Icon class="inline h-6 w-6" name={"tag-outline"} aria-hidden="true" focusable="false" />
			{tag}
		</span>
	</h1>
	{description && <q class="-mt-3 mb-6 block italic">{description}</q>}

	<section aria-label="Blog post list">
		<ul class="space-y-4">
			{
				page.data.map((p) => (
					<li class="flex max-w-full flex-col flex-wrap gap-1.5 [&_q]:basis-full">
						<PostPreview post={p} as="h2" withDesc />
					</li>
				))
			}
		</ul>
		<Pagination {...paginationProps} />
	</section>
</PageLayout>
