---
import type { HTMLTag } from "astro/types";
import FormattedDate from "@/components/FormattedDate.astro";
import type { Post } from "@/lib/interfaces";
import { getPostContentByPostId, processFileBlocks } from "@/lib/notion/client";
import {
	extractTargetBlocks,
	getNavLink,
	getPostLink,
	setCurrentHeadings,
} from "@/lib/blog-helpers";
import NotionBlocks from "@/components/NotionBlocks.astro";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers";
import { MENU_PAGES_COLLECTION, BUILD_FOLDER_PATHS } from "@/constants";
import Icon from "@/components/Icon.astro";
import { buildHeadings, slugify } from "@/utils";
import fs from "fs/promises";
import path from "path";
import superjson from "superjson";

interface Props {
	post_full_preview: Post;
	shouldUseCache: boolean;
	postLastUpdatedBeforeLastBuild: boolean;
	as?: HTMLTag;
	withDesc?: boolean;
}

const {
	post_full_preview,
	shouldUseCache,
	postLastUpdatedBeforeLastBuild,
	as: Tag = "div",
	withDesc = false,
} = Astro.props;
const { blocks, referencesInPage } = await getPostContentByPostId(post_full_preview);

// --- Headings Cache Handling ---
let headings = null;
const headingsCacheDir = BUILD_FOLDER_PATHS["headingsCache"];
const headingsCacheFile = path.join(headingsCacheDir, `${post_full_preview.Slug}.json`);

let cachedHeadings = null;
if (postLastUpdatedBeforeLastBuild) {
	try {
		const headingsData = await fs.readFile(headingsCacheFile, "utf-8");
		cachedHeadings = superjson.parse(headingsData);
	} catch (e) {
		cachedHeadings = null;
	}
}

if (cachedHeadings) {
	headings = cachedHeadings;
} else {
	headings = buildHeadings(blocks);
	try {
		await fs.writeFile(headingsCacheFile, superjson.stringify(headings), "utf-8");
	} catch (e) {
		console.error("Error saving headings cache:", e);
	}
}

setCurrentHeadings(headings);

// --- HTML Cache Handling ---
let cachedHtml = "";
if (shouldUseCache) {
	const htmlCacheFile = path.join(
		BUILD_FOLDER_PATHS["blocksHtmlCache"],
		`${post_full_preview.Slug}.html`,
	);
	try {
		cachedHtml = await fs.readFile(htmlCacheFile, "utf-8");
	} catch (e) {
		// Cache file doesn't exist; fallback to fresh rendering.
		cachedHtml = "";
	}
}

const fileAtacchedBlocks = extractTargetBlocks(["image", "video", "file", "audio"], blocks).filter(
	(block) => {
		if (!block) return false;
		const imageOrVideoOrAudioOrFile = block.NImage || block.File || block.Video || block.NAudio;
		return (
			imageOrVideoOrAudioOrFile &&
			imageOrVideoOrAudioOrFile.File &&
			imageOrVideoOrAudioOrFile.File.Url
		);
	},
);
await processFileBlocks(fileAtacchedBlocks);

const postLink = getPostLink(
	post_full_preview.Slug,
	post_full_preview.Collection === MENU_PAGES_COLLECTION,
);
---

<FormattedDate
	date={new Date(post_full_preview.Date)}
	class="text-accent/90 min-w-[120px] text-xs"
/>

<Tag class="font-bold">
	{
		post_full_preview.Pinned && (
			<Icon
				class="me-1 inline-block h-6 w-6"
				name={"pin"}
				aria-label="Pinned Post"
				focusable="false"
				fill="#D50B0D"
			/>
		)
	}
	<a href={postLink} class="site-page-link inline no-underline">
		{post_full_preview.Title}
	</a>
</Tag>

{
	withDesc && post_full_preview.Excerpt && (
		<q class="line-clamp-3 block italic">{post_full_preview.Excerpt}</q>
	)
}

{
	post_full_preview.Tags && post_full_preview.Tags.length > 0 && (
		<div class="mt-1 gap-2">
			<Icon
				class="me-1 inline-block h-4 w-4"
				name={"tag-outline"}
				aria-hidden="true"
				focusable="false"
			/>
			{post_full_preview.Tags.map((tag, i) => (
				<>
					<a
						class={`inline-block rounded-md px-1 text-sm ${getNotionColorToTailwindColor(
							tag.color + "-background",
							true,
						)}`}
						aria-label={`View more blogs with the tag ${tag.name}`}
						href={getNavLink("/tags/" + slugify(tag.name) + "/")}
					>
						{tag.name}
					</a>{" "}
				</>
			))}
		</div>
	)
}

{
	shouldUseCache && cachedHtml ? (
		<section class="post-body" data-html-type="cached" set:html={cachedHtml} />
	) : (
		<section class="post-body" data-html-type="new">
			<NotionBlocks blocks={blocks} />
		</section>
	)
}
