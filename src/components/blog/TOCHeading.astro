---
import type { TocItem } from "@/utils";

interface Props {
	heading: TocItem;
	visualOnly?: boolean;
}

const {
	heading: { slug, text, depth, subheadings },
	visualOnly = false,
} = Astro.props;

const getVisualStyles = (depth: number) => {
	const baseStyle = "h-[2px] rounded-full transition-colors duration-200";
	const styles = {
		1: "w-4 bg-accent/25",
		2: "mt-2 ml-1 w-[12px] bg-accent/25",
		3: "mt-2 ml-2 w-2 bg-accent/25",
	};
	return `${styles[depth] || ""} ${baseStyle}`.trim();
};
---

{
	visualOnly ? (
		<div class="mt-0">
			<div class={getVisualStyles(depth)} id={`-vistocid--${slug}`} />
			{!!subheadings.length && (
				<div>
					{subheadings.map((subheading) => (
						<Astro.self heading={subheading} visualOnly={true} />
					))}
				</div>
			)}
		</div>
	) : (
		<li class={depth > 1 ? "ml-3" : ""}>
			<a
				class={`text-textColor/60 hover:bg-accent/5 hover:text-textColor line-clamp-3 block no-underline transition-colors duration-200 ease-in-out ${slug === "autogenerated-interlinked-content" ? "hidden" : ""} rounded-sm px-2 py-1`}
				href={`#${slug}`}
				id={`-tocid--${slug}`}
				aria-label={`Scroll to section: ${text}`}
			>
				{text}
			</a>

			{!!subheadings.length && (
				<ul>
					{subheadings.map((subheading) => (
						<Astro.self heading={subheading} />
					))}
				</ul>
			)}
		</li>
	)
}
