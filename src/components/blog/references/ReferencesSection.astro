---
import { REFERENCES, BUILD_FOLDER_PATHS } from "@/constants";
import InternalLinksInThisPage from "@/components/blog/references/SiteLinksInThisPage.astro";
import LinksToThisPage from "@/components/blog/references/LinksToThisPage.astro";
import ExternalLinksInThisPage from "@/components/blog/references/ExternalLinksInThisPage.astro";
import MediaLinksInThisPage from "@/components/blog/references/MediaLinksInThisPage.astro";
import type { Post } from "@/lib/interfaces";
import { getReferencesInPage, getReferencesToPage } from "@/lib/blog-helpers";
import * as fs from "fs/promises";
import * as path from "path";

interface Props {
	post: Post;
	shouldUseCache: boolean;
}

const { post, shouldUseCache } = Astro.props;
// Load references data
const allReferencesToPage = getReferencesToPage(post.PageId);
const allReferencesInPage = getReferencesInPage(post.PageId);

// Filter references for each component
const filteredExternalNonMediaReferences = allReferencesInPage
	? allReferencesInPage.filter((ref) => ref.external_hrefs.length > 0 || ref.direct_nonmedia_link)
	: null;
const filteredSitePages = allReferencesInPage
	? allReferencesInPage.filter((ref) => ref.other_pages.length > 0 || ref.link_to_pageid)
	: null;
const filteredMediaReferences = allReferencesInPage
	? allReferencesInPage.filter((ref) => ref.direct_media_link)
	: null;

// Determine if rendering is needed
const rendering =
	REFERENCES &&
	Object.keys(REFERENCES).length > 0 &&
	((REFERENCES["links-to-this-page"] &&
		allReferencesToPage &&
		Object.keys(allReferencesToPage).length > 0) ||
		(REFERENCES["site-links-in-page"] &&
			filteredSitePages &&
			Object.keys(filteredSitePages).length > 0) ||
		(REFERENCES["external-links-in-page"] &&
			filteredExternalNonMediaReferences &&
			Object.keys(filteredExternalNonMediaReferences).length > 0) ||
		(REFERENCES["media-and-file-links-in-this-page"] &&
			filteredMediaReferences &&
			Object.keys(filteredMediaReferences).length > 0));

// Load cached HTML if shouldUseCache is true
let cachedStaticReferencesHtml = null;
const staticCachePath = path.join(
	BUILD_FOLDER_PATHS["referencesHtmlCache"],
	`${post.Slug}-static.html`,
);

if (shouldUseCache) {
	try {
		cachedStaticReferencesHtml = await fs.readFile(staticCachePath, "utf-8");
	} catch {
		cachedStaticReferencesHtml = null;
	}
}

// Define styles
const interlinkedContentStyles = `
	h2::before {
		content: "#";
		position: absolute;
		color: color-mix(in srgb, var(--color-accent) 50%, transparent);
		margin-left: -1.5rem;
		display: inline-block;
		opacity: 0;
		transition: opacity 0.3s ease;
	}

	h2:hover::before {
		opacity: 1;
	}

	#-tocid--autogenerated-interlinked-content,
	#-vistocid--autogenerated-interlinked-content {
		display: block !important;
	}

	#-bottomtocid--autogenerated-interlinked-content {
		display: inline !important;
	}
`;
---

<aside data-pagefind-ignore="all" class="print:hidden">
	{
		rendering && (
			<>
				<h2
					class="non-toggle-h2 mt-8 mb-4 cursor-pointer text-2xl font-normal"
					id="autogenerated-interlinked-content"
					onclick="
				var fullUrl = `${window.location.origin}${window.location.pathname}#${id}`;
				navigator.clipboard.writeText(fullUrl);
				window.history.pushState(null, '', fullUrl);
				document.getElementById(`${id}`).scrollIntoView({ behavior: 'smooth' });
			"
				>
					Interlinked Content
				</h2>
				<style set:html={interlinkedContentStyles} />
			</>
		)
	}

	<!-- LinksToThisPage: Render fresh as it depends on external data -->
	{
		REFERENCES &&
			Object.keys(REFERENCES).length > 0 &&
			REFERENCES["links-to-this-page"] &&
			allReferencesToPage && (
				<LinksToThisPage post={post} allReferencesToPage={allReferencesToPage} />
			)
	}

	<!-- Static References: Use cache if available -->
	{
		REFERENCES &&
			Object.keys(REFERENCES).length > 0 &&
			(REFERENCES["site-links-in-page"] ||
				REFERENCES["media-and-file-links-in-this-page"] ||
				REFERENCES["external-links-in-page"]) &&
			(filteredSitePages || filteredMediaReferences || filteredExternalNonMediaReferences) &&
			(cachedStaticReferencesHtml ? (
				<div class="static-references" set:html={cachedStaticReferencesHtml} />
			) : (
				<div class="static-references">
					{REFERENCES["site-links-in-page"] && filteredSitePages && (
						<InternalLinksInThisPage post={post} filteredReferencesInPage={filteredSitePages} />
					)}
					{REFERENCES["media-and-file-links-in-this-page"] && filteredMediaReferences && (
						<MediaLinksInThisPage post={post} filteredReferencesInPage={filteredMediaReferences} />
					)}
					{REFERENCES["external-links-in-page"] && filteredExternalNonMediaReferences && (
						<ExternalLinksInThisPage
							post={post}
							filteredReferencesInPage={filteredExternalNonMediaReferences}
						/>
					)}
				</div>
			))
	}

	{
		rendering && (
			<hr class="divider bg-accent/30 mx-auto my-4 h-0.5 w-full rounded-sm border-none" />
		)
	}
</aside>
