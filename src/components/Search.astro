---
// Heavy inspiration taken from Astro Starlight -> https://github.com/withastro/starlight/blob/main/packages/starlight/components/Search.astro

import "@pagefind/default-ui/css/ui.css";
import Icon from "@/components/Icon.astro";
---

<site-search id="search" class="ms-auto">
	<button
		data-open-modal
		disabled
		class="hover:text-accent hover:ring-accent-400 flex h-10 w-10 cursor-pointer items-center justify-center rounded-md transition-all hover:ring-2"
		aria-label="Open search"
	>
		<Icon class="h-7 w-7" name={"search"} />
	</button>
	<dialog
		aria-label="search"
		class="bg-bgColor/80 h-full max-h-full w-full max-w-full border border-zinc-400 shadow-sm backdrop:backdrop-blur-sm sm:mx-auto sm:mt-16 sm:mb-auto sm:h-max sm:max-h-[calc(100%-8rem)] sm:min-h-[15rem] sm:w-5/6 sm:max-w-[48rem] sm:rounded-lg"
	>
		<div class="dialog-frame flex flex-col gap-4 p-6 pt-12 sm:pt-6">
			<button
				data-close-modal
				class="ms-auto cursor-pointer rounded-md bg-zinc-200 p-2 font-semibold dark:bg-zinc-700"
				aria-label="Close Search"
				><Icon class="inline h-6 w-6" name={"close"} aria-hidden="true" /></button
			>
			{
				import.meta.env.DEV ? (
					<div class="mx-auto text-center">
						<p>
							Search is only available in production builds. <br />
							Try building and previewing the site to test it out locally.
						</p>
					</div>
				) : (
					<div class="search-container">
						<div id="webtrotion__search" />
					</div>
				)
			}
		</div>
	</dialog>
</site-search>

<script>
	class SiteSearch extends HTMLElement {
		private openBtn: HTMLButtonElement;
		private closeBtn: HTMLButtonElement;
		private dialog: HTMLDialogElement;
		private dialogFrame: HTMLDivElement;
		private observer: MutationObserver;
		private initialized: boolean = false;
		private idleCallbackId: number | null = null;

		constructor() {
			super();
			this.openBtn = this.querySelector<HTMLButtonElement>("button[data-open-modal]")!;
			this.closeBtn = this.querySelector<HTMLButtonElement>("button[data-close-modal]")!;
			this.dialog = this.querySelector("dialog")!;
			this.dialogFrame = this.querySelector(".dialog-frame")!;

			this.openBtn.addEventListener("click", this.openModal);
			this.openBtn.disabled = false;
			this.closeBtn.addEventListener("click", this.closeModal);

			// Initialize MutationObserver
			this.observer = new MutationObserver(this.queueDOMCheck);
		}

		connectedCallback() {
			window.addEventListener("keydown", this.onWindowKeydown);

			if (import.meta.env.DEV) return;
			const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1));
			onIdle(async () => {
				const { PagefindUI } = await import("@pagefind/default-ui");
				new PagefindUI({
					element: "#webtrotion__search",
					baseUrl: import.meta.env.BASE_URL,
					bundlePath: import.meta.env.BASE_URL.replace(/\/$/, "") + "/pagefind/",
					showImages: false,
					showSubResults: true,
					showEmptyFilters: false,
					openFilters: ["Tags"],
					translations: {
						placeholder: "Tip: Use âŒ˜K or ^K to open search",
						zero_results: "Couldn't find [SEARCH_TERM]",
					},
				});

				// Start observing the dialog for changes
				this.observer.observe(this.dialog, { childList: true, subtree: true });
			});
		}

		disconnectedCallback() {
			window.removeEventListener("keydown", this.onWindowKeydown);
			this.observer.disconnect();
			if (this.idleCallbackId !== null) {
				(window.cancelIdleCallback || clearTimeout)(this.idleCallbackId);
			}
		}

		queueDOMCheck = () => {
			if (this.initialized) return;

			if (this.idleCallbackId !== null) {
				(window.cancelIdleCallback || clearTimeout)(this.idleCallbackId);
			}

			const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 0));
			this.idleCallbackId = onIdle(this.checkForFilterBlocks);
		};

		checkForFilterBlocks = () => {
			this.idleCallbackId = null;
			if (this.initialized) return;

			const filterBlocks = this.dialog.querySelectorAll(".pagefind-ui__filter-block");
			if (filterBlocks.length >= 2) {
				this.initializeFilterBlocks(filterBlocks);
				this.initialized = true;
				this.observer.disconnect();
			}
		};

		initializeFilterBlocks = (filterBlocks: NodeListOf<Element>) => {
			const secondFilterBlock = filterBlocks[1] as HTMLDetailsElement;
			if (window.innerWidth >= 640) {
				// Tailwind's sm breakpoint
				secondFilterBlock.setAttribute("open", "");
			} else {
				secondFilterBlock.removeAttribute("open");
			}
		};

		onWindowClick = (event: MouseEvent) => {
			const isLink = "href" in (event.target || {});
			if (
				isLink ||
				(document.body.contains(event.target as Node) &&
					!this.dialogFrame.contains(event.target as Node))
			)
				this.closeModal();
		};

		onWindowKeydown = (e: KeyboardEvent) => {
			if ((e.metaKey || e.ctrlKey) && e.key === "k" && !this.dialog.open) {
				this.openModal();
				e.preventDefault();
			}
		};

		openModal = (event?: MouseEvent) => {
			this.dialog.showModal();
			this.querySelector("input")?.focus();
			event?.stopPropagation();
			window.addEventListener("click", this.onWindowClick);
		};

		closeModal = () => {
			if (this.dialog.open) {
				this.dialog.close();
				window.removeEventListener("click", this.onWindowClick);
			}
		};
	}

	customElements.define("site-search", SiteSearch);
</script>

<style is:global>
	:root {
		--pagefind-ui-font: inherit;
	}

	#webtrotion__search .pagefind-ui__search-clear {
		width: calc(60px * var(--pagefind-ui-scale));
		padding: 0;
		background-color: transparent;
		overflow: hidden;
	}
	#webtrotion__search .pagefind-ui__search-clear:focus {
		outline: 1px solid var(--color-accent-2);
	}
	#webtrotion__search .pagefind-ui__search-clear::before {
		content: "";
		-webkit-mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'  %3E%3Cpath d='M6 5v.18L8.82 8h2.4l-.72 1.68l2.1 2.1L14.21 8H20V5H6M3.27 5L2 6.27l6.97 6.97L6.5 19h3l1.57-3.66L16.73 21L18 19.73L3.55 5.27L3.27 5Z'%3E%3C/path%3E%3C/svg%3E")
			center / 60% no-repeat;
		mask: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' %3E%3Cpath stroke-linecap='round' stroke-linejoin='round' d='M6 5v.18L8.82 8h2.4l-.72 1.68l2.1 2.1L14.21 8H20V5H6M3.27 5L2 6.27l6.97 6.97L6.5 19h3l1.57-3.66L16.73 21L18 19.73L3.55 5.27L3.27 5Z'%3E%3C/path%3E%3C/svg%3E")
			center / 60% no-repeat;
		background-color: var(--color-accent);
		display: block;
		width: 100%;
		height: 100%;
	}

	#webtrotion__search .pagefind-ui__result {
		padding: 12px;
		border: 0;
		overflow-x: hidden;
	}
	@media (max-width: 640px) {
		#webtrotion__search .pagefind-ui__drawer {
			gap: 12px !important;
		}
	}

	#webtrotion__search .pagefind-ui__result-link {
		background-size: 100% 6px;
		background-position: bottom;
		background-repeat: repeat-x;
		background-image: linear-gradient(
			transparent,
			transparent 5px,
			var(--color-textColor) 5px,
			var(--color-textColor)
		);
	}

	#webtrotion__search .pagefind-ui__result-link:hover {
		text-decoration: none;
		background-image: linear-gradient(
			transparent,
			transparent 4px,
			var(--color-link) 4px,
			var(--color-link)
		);
	}

	#webtrotion__search mark {
		color: var(--color-quote);
		background-color: transparent;
		font-weight: 600;
	}
</style>

<style>
	#webtrotion__search {
		--pagefind-ui-primary: var(--color-accent);
		--pagefind-ui-text: var(--color-textColor);
		--pagefind-ui-background: var(--color-bgColor);
		--pagefind-ui-border: var(--color-zinc-400);
		--pagefind-ui-border-width: 1px;
	}
</style>
