---
import * as interfaces from "@/lib/interfaces.ts";
import { getNotionColorToTailwindColor, getIconTailwindFilterStyle } from "@/lib/style-helpers.ts";
import RichText from "@/components/notion-blocks/RichText.astro";
import NotionBlocks from "@/components/NotionBlocks.astro";

export interface Props {
	block: interfaces.Block;
	renderChildren?: boolean; // Make this optional
	setId?: boolean;
}

const { block, renderChildren = true, setId = true } = Astro.props;
const hasRichTexts = block.Callout && block.Callout.RichTexts && block.Callout.RichTexts.length > 0;
---

<div
	class={`
    callout mx-auto my-2 flex w-full max-w-full rounded px-3 py-4 leading-6
    ${
			block.Callout.Color === "default"
				? getNotionColorToTailwindColor(block.Callout.Color + "-background")
				: getNotionColorToTailwindColor(block.Callout.Color)
		}
  `}
	id={setId ? block.Id : undefined}
>
	{
		block.Callout && block.Callout.Icon && (
			<div class="m-0 mr-2 leading-6">
				{block.Callout.Icon.Type === "emoji" ? (
					block.Callout.Icon.Emoji
				) : block.Callout.Icon.Type === "external" ? (
					<img
						src={block.Callout.Icon.Url}
						class={`no-rss h-5 w-5 max-w-none ${getIconTailwindFilterStyle(block.Callout.Icon.Url)}`}
						alt=""
					/>
				) : null}
			</div>
		)
	}
	<div class={`m-0 min-w-0 leading-6 ${!hasRichTexts ? "*:first:mt-0" : ""}`}>
		{
			hasRichTexts &&
				block.Callout.RichTexts.map((richText: interfaces.RichText) => (
					<RichText richText={richText} blockID={block.Id} />
				))
		}
		{
			block.Callout.Children && renderChildren && (
				<NotionBlocks
					blocks={block.Callout.Children}
					renderChildren={renderChildren}
					setId={setId}
				/>
			)
		}
	</div>
</div>
