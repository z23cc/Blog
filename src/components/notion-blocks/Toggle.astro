---
import * as interfaces from "@/lib/interfaces.ts";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers.ts";
import RichText from "@/components/notion-blocks/RichText.astro";
import NotionBlocks from "@/components/NotionBlocks.astro";
import Icon from "@/components/Icon.astro";

export interface Props {
	block: interfaces.Block;
	renderChildren?: boolean; // Make this optional
	setId?: boolean;
}

const { block, renderChildren = true, setId = true } = Astro.props;
---

{
	renderChildren ? (
		<details
			class:list={[
				"toggle my-1",
				{
					[`${getNotionColorToTailwindColor(block.Toggle.Color)} rounded-sm px-1`]:
						block.Toggle.Color &&
						!["default", "default_background", "default-background"].includes(block.Toggle.Color),
				},
			]}
			id={setId ? block.Id : undefined}
		>
			<summary class="flex max-w-full cursor-pointer list-none list-image-none gap-2">
				<div>
					<Icon
						name={"toggle-triangle"}
						class="rotate-svg h-6 w-6 shrink-0 transition-all duration-300"
						aria-label="Toggle open/close"
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
					/>
				</div>
				<div>
					{block.Toggle.RichTexts.map((richText: interfaces.RichText) => (
						<RichText richText={richText} blockID={block.Id} />
					))}
				</div>
			</summary>
			<div class="pl-8">
				{block.Toggle.Children && renderChildren && (
					<NotionBlocks
						blocks={block.Toggle.Children}
						renderChildren={renderChildren}
						setId={setId}
					/>
				)}
			</div>
		</details>
	) : (
		<div class="my-1 flex max-w-full">
			<div>
				<Icon
					name={"toggle-triangle"}
					class="h-6 w-6 shrink-0"
					aria-label="Toggle open/close"
					stroke="currentColor"
					stroke-linecap="round"
					stroke-linejoin="round"
					stroke-width="2"
					fill="whitesmoke"
				/>
			</div>
			<div>
				{block.Toggle.RichTexts.map((richText: interfaces.RichText) => (
					<RichText richText={richText} blockID={block.Id} />
				))}
			</div>
		</div>
	)
}

<style>
	.toggle > summary > a {
		display: inline;
	}
	/* This targets only the direct child SVG of the opened details */
	details[open] > summary > div > .shrink-0.rotate-svg {
		transform: rotateZ(90deg);
	}
	summary::-webkit-details-marker {
		display: none;
	}
</style>
