---
import * as interfaces from "@/lib/interfaces.ts";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers.ts";
import RichText from "@/components/notion-blocks/RichText.astro";
import NotionBlocks from "@/components/NotionBlocks.astro";

export interface Props {
	block: interfaces.Block;
	renderChildren?: boolean; // Make this optional
	setId?: boolean;
}

const { block, renderChildren = true, setId = true } = Astro.props;
---

<blockquote
	class:list={[
		"nquote my-4 border-s-4 border-gray-600 px-2! dark:border-gray-300",
		{
			[`rounded-sm ${getNotionColorToTailwindColor(block.Quote.Color)}`]:
				block.Quote.Color &&
				!["default", "default_background", "default-background"].includes(block.Quote.Color),
		},
	]}
	id={setId ? block.Id : undefined}
>
	<div class="p-1">
		{
			block.Quote.RichTexts.map((richText: interfaces.RichText) => (
				<RichText richText={richText} blockID={block.Id} />
			))
		}
		{
			block.Quote.Children && renderChildren && (
				<NotionBlocks blocks={block.Quote.Children} renderChildren={renderChildren} setId={setId} />
			)
		}
	</div>
</blockquote>
