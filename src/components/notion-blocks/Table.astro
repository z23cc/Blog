---
import { SHORTCODES } from "@/constants";
import * as interfaces from "@/lib/interfaces.ts";
import RichText from "@/components/notion-blocks/RichText.astro";

export interface Props {
	block: interfaces.Block;
	setId?: boolean;
}

const { block, setId = true } = Astro.props;

// Check if the first cell starts with SHORTCODES.table
const plainTextFirstCell = block.Table?.Rows[0]?.Cells[0]?.RichTexts.map(
	(richText) => richText.PlainText,
).join(" ");
const isDataTable =
	plainTextFirstCell && block.Table?.HasColumnHeader
		? plainTextFirstCell.startsWith(SHORTCODES.table)
		: false;
const tableClass = isDataTable ? "datatable" : "";

// Remove SHORTCODES.table from the first cell if it exists
if (isDataTable && block.Table?.Rows[0]?.Cells[0]?.RichTexts[0]?.Text?.Content) {
	block.Table.Rows[0].Cells[0].RichTexts[0].Text.Content =
		block.Table.Rows[0].Cells[0].RichTexts[0].Text.Content.replace(SHORTCODES.table, "").trim();
}

const coltype_identifiers = {
	boolean: "‚òëÔ∏è",
	number: "üî¢",
	datetime: "üìÖ",
	//"tag": "üè∑Ô∏è",
};
function getColumnType(cellContent: string) {
	for (const [type, emoji] of Object.entries(coltype_identifiers)) {
		if (cellContent.startsWith(emoji)) {
			return type;
		}
	}
	return "html";
}
---

<div
	class="ntable relative max-w-full table-auto overflow-x-auto pb-2"
	id={setId ? block.Id : undefined}
>
	<table class={`w-full text-left text-sm text-textColor/90 ${tableClass}`}>
		<thead>
			{
				block.Table?.HasColumnHeader && (
					<tr class="border-b border-gray-200/90 dark:border-gray-700/90">
						{block.Table.Rows[0]?.Cells.map((cell: interfaces.TableCell, i: number) => {
							if (isDataTable) {
								const cellContent = cell.RichTexts.map((richText) => richText.PlainText).join(" ");
								const columnType = getColumnType(cellContent);
								return (
									<th
										scope="col"
										class="bg-ngray-table-header-bg-light text-textColor/90 dark:bg-ngray-table-header-bg-dark/[.03] p-2 text-xs font-bold uppercase"
										data-type={columnType}
									>
										{cell.RichTexts.map((richText: interfaces.RichText) => (
											<RichText richText={richText} blockID={block.Id} />
										))}
									</th>
								);
							} else {
								return (
									<th
										scope="col"
										class="bg-ngray-table-header-bg-light text-textColor/90 dark:bg-ngray-table-header-bg-dark/[.03] p-2 text-xs font-semibold uppercase"
									>
										{cell.RichTexts.map((richText: interfaces.RichText) => (
											<RichText richText={richText} blockID={block.Id} />
										))}
									</th>
								);
							}
						})}
					</tr>
				)
			}
		</thead>
		<tbody>
			{
				block.Table?.Rows.map((tableRow: interfaces.TableRow, j: number) => {
					// Skip the first row if it's a header row
					if (block.Table?.HasColumnHeader && j === 0) return null;

					return (
						<tr>
							{tableRow.Cells.map((cell: interfaces.TableCell, i: number) => {
								if (block.Table?.HasRowHeader && i === 0) {
									return (
										<th
											scope="row"
											class="bg-ngray-table-header-bg-light text-textColor dark:bg-ngray-table-header-bg-dark/[.03] p-2 font-semibold whitespace-nowrap"
										>
											{cell.RichTexts.map((richText: interfaces.RichText) => (
												<RichText richText={richText} blockID={block.Id} />
											))}
										</th>
									);
								}
								return (
									<td class="p-2">
										{cell.RichTexts.map((richText: interfaces.RichText) => (
											<RichText richText={richText} blockID={block.Id} />
										))}
									</td>
								);
							})}
						</tr>
					);
				})
			}
		</tbody>
	</table>
</div>
