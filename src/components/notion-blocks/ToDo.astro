---
import * as interfaces from "@/lib/interfaces.ts";
import { getNotionColorToTailwindColor } from "@/lib/style-helpers.ts";
import RichText from "@/components/notion-blocks/RichText.astro";
import NotionBlocks from "@/components/NotionBlocks.astro";
import Icon from "@/components/Icon.astro";

export interface Props {
	block: interfaces.Block;
	renderChildren?: boolean; // Make this optional
	setId?: boolean;
}

const { block, renderChildren = true, setId = true } = Astro.props;
---

<div class="to-do pl-2 leading-7" id={setId ? block.Id : undefined}>
	{
		block.ListItems.filter((b: interfaces.Block) => b.Type === "to_do").map(
			(b: interfaces.Block, index) => (
				<div class="gap-2" id={setId ? b.Id : undefined}>
					<div
						class:list={[
							"flex max-w-full items-start",
							{
								[`${getNotionColorToTailwindColor(b.ToDo.Color)} rounded-sm px-1`]:
									b.ToDo.Color &&
									!["default", "default_background", "default-background"].includes(b.ToDo.Color),
							},
						]}
					>
						{/* Flex container for the checkbox and text */}
						<div class="mt-1 pr-2">
							{/* Padding for the checkbox */}

							<Icon
								class="text-textColor/50 h-5 w-5"
								name={b.ToDo.Checked ? "checkbox-checked" : "checkbox-unchecked"}
								aria-label={b.ToDo.Checked ? "checkbox-checked" : "checkbox-unchecked"}
								focusable="false"
							/>
							<span class="rss-only hidden">{b.ToDo.Checked ? "✅" : "⬜"}</span>
						</div>
						<div class="min-w-0 flex-1">
							{/* Container for text, taking up the rest of the space */}
							{b.ToDo.RichTexts.map((richText: interfaces.RichText) => {
								if (b.ToDo.Checked) {
									return (
										<span class="line-through decoration-slate-500/50">
											{/* Block element for the text */}
											<RichText richText={richText} blockID={b.Id} />
										</span>
									);
								}
								return <RichText richText={richText} blockID={b.Id} />;
							})}
						</div>
					</div>
					{b.HasChildren && renderChildren && (
						<div class="mt-1">
							{/* Margin for spacing between the to-do and its children */}
							<NotionBlocks
								blocks={b.ToDo.Children}
								renderChildren={renderChildren}
								setId={setId}
							/>
						</div>
					)}
				</div>
			),
		)
	}
</div>
