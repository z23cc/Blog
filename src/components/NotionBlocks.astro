---
import * as interfaces from "@/lib/interfaces";
import { isTweetURL, isAmazonURL, buildURLToHTMLMap } from "@/lib/blog-helpers";
import Paragraph from "@/components/notion-blocks/Paragraph.astro";
import Heading1 from "@/components/notion-blocks/Heading1.astro";
import Heading2 from "@/components/notion-blocks/Heading2.astro";
import Heading3 from "@/components/notion-blocks/Heading3.astro";
import TableOfContents from "@/components/notion-blocks/TableOfContents.astro";
import NImage from "@/components/notion-blocks/embeds/NImage.astro";
import NAudio from "@/components/notion-blocks/embeds/NAudio.astro";
import Video from "@/components/notion-blocks/embeds/Video.astro";
import NCode from "@/components/notion-blocks/NCode.astro";
import Quote from "@/components/notion-blocks/Quote.astro";
import Equation from "@/components/notion-blocks/Equation.astro";
import Callout from "@/components/notion-blocks/Callout.astro";
import Embed from "@/components/notion-blocks/embeds/Embed.astro";
import Bookmark from "@/components/notion-blocks/embeds/Bookmark.astro";
import Divider from "@/components/notion-blocks/Divider.astro";
import Table from "@/components/notion-blocks/Table.astro";
import ColumnList from "@/components/notion-blocks/ColumnList.astro";
import BulletedListItems from "@/components/notion-blocks/BulletedListItems.astro";
import NumberedListItems from "@/components/notion-blocks/NumberedListItems.astro";
import ToDo from "@/components/notion-blocks/ToDo.astro";
import SyncedBlock from "@/components/notion-blocks/SyncedBlock.astro";
import Toggle from "@/components/notion-blocks/Toggle.astro";
import File from "@/components/notion-blocks/File.astro";
import LinkToPage from "@/components/notion-blocks/LinkToPage.astro";

export interface Props {
	blocks: interfaces.Block[];
	level?: number;
	renderChildren?: boolean;
	setId?: boolean;
}

const { blocks: rawBlocks, level = 1, renderChildren = true, setId = true } = Astro.props;

const blocks = rawBlocks.reduce((arr, block: interfaces.Block, i: number) => {
	const isBulletedListItem = block.Type === "bulleted_list_item";
	const isNumberedListItem = block.Type === "numbered_list_item";
	const isToDo = block.Type === "to_do";

	if (!isBulletedListItem && !isNumberedListItem && !isToDo) {
		return arr.concat(block);
	}

	let listType = "";
	if (isBulletedListItem) {
		listType = "bulleted_list";
	} else if (isNumberedListItem) {
		listType = "numbered_list";
	} else {
		listType = "to_do_list";
	}

	if (i === 0) {
		const list: interfaces.List = {
			Type: listType,
			ListItems: [block],
		};
		return arr.concat(list);
	}

	const prevList = arr[arr.length - 1];

	if (
		(isBulletedListItem && prevList.Type !== "bulleted_list") ||
		(isNumberedListItem && prevList.Type !== "numbered_list") ||
		(isToDo && prevList.Type !== "to_do_list")
	) {
		const list: interfaces.List = {
			Type: listType,
			ListItems: [block],
		};
		return arr.concat(list);
	}

	prevList.ListItems.push(block);

	return arr;
}, []);

const bookmarkURLs = blocks
	.filter((b: interfaces.Block) => ["bookmark", "link_preview", "embed"].includes(b.Type))
	.map((b: interfaces.Block) => {
		const urlString = (b.Bookmark || b.LinkPreview || b.Embed).Url;

		let url: URL;
		try {
			url = new URL(urlString);
		} catch (err) {
			console.log(err);
		}
		return url;
	})
	.filter((url: URL) => url && !isTweetURL(url) && !isAmazonURL(url));

const bookmarkURLMap = await buildURLToHTMLMap(bookmarkURLs);
---

{
	blocks.map((block: interfaces.Block) => {
		switch (block.Type) {
			case "paragraph":
				return <Paragraph block={block} renderChildren={renderChildren} setId={setId} />;
			case "heading_1":
				return <Heading1 block={block} renderChildren={renderChildren} setId={setId} />;
			case "heading_2":
				return <Heading2 block={block} renderChildren={renderChildren} setId={setId} />;
			case "heading_3":
				return <Heading3 block={block} renderChildren={renderChildren} setId={setId} />;
			case "table_of_contents":
				return <TableOfContents block={block} setId={setId} />;
			case "image":
				return <NImage block={block} setId={setId} />;
			case "video":
				return <Video block={block} setId={setId} />;
			case "audio":
				return <NAudio block={block} setId={setId} />;
			case "code":
				return <NCode block={block} setId={setId} />;
			case "quote":
				return <Quote block={block} renderChildren={renderChildren} setId={setId} />;
			case "equation":
				return <Equation block={block} setId={setId} />;
			case "callout":
				return <Callout block={block} renderChildren={renderChildren} setId={setId} />;
			case "embed":
				return <Embed block={block} urlMap={bookmarkURLMap} setId={setId} />;
			case "bookmark":
			case "link_preview":
				return <Bookmark block={block} urlMap={bookmarkURLMap} setId={setId} />;
			case "divider":
				return <Divider />;
			case "table":
				return <Table block={block} setId={setId} />;
			case "column_list":
				return <ColumnList block={block} renderChildren={renderChildren} setId={setId} />;
			case "bulleted_list":
				return <BulletedListItems block={block} renderChildren={renderChildren} setId={setId} />;
			case "numbered_list":
				return (
					<NumberedListItems
						block={block}
						level={level}
						renderChildren={renderChildren}
						setId={setId}
					/>
				);
			case "to_do_list":
				return <ToDo block={block} renderChildren={renderChildren} setId={setId} />;
			case "synced_block":
				return <SyncedBlock block={block} renderChildren={renderChildren} setId={setId} />;
			case "toggle":
				return <Toggle block={block} renderChildren={renderChildren} setId={setId} />;
			case "file":
				return <File block={block} setId={setId} />;
			case "link_to_page":
				return <LinkToPage block={block} setId={setId} />;
		}
		return null;
	})
}
